DROP DATABASE DISCOSOUND;

-- Crear la base de datos

	CREATE DATABASE DISCOSOUND;

	USE DISCOSOUND;

-- 	Crear tablas

	CREATE TABLE USUARIO (
	DNI VARCHAR (9) PRIMARY KEY,
	NOMBRE VARCHAR (20),
	APELLIDO VARCHAR (20),
	NOMUSU VARCHAR (20) not null,
	FECHANAC DATE,
	EMAIL VARCHAR(40),
	CONTRASEINA varchar(20) not null
	);

	CREATE TABLE ADMINISTRADOR (
	DNIADMIN VARCHAR(9) PRIMARY KEY,
	NOMDISCOTECA VARCHAR(20),
	FOREIGN KEY (DNIADMIN) REFERENCES usuario (dni) on delete cascade on update cascade
	);

	CREATE TABLE CLIENTE (
	DNICLIENTE VARCHAR(9) PRIMARY KEY,
	GENERO VARCHAR (10),
	FOREIGN KEY (DNICLIENTE) REFERENCES usuario (dni) on delete cascade on update cascade
	);

	CREATE TABLE DISCOTECA (
	CODIGODISC VARCHAR (20) PRIMARY KEY,
	NOMBRE VARCHAR (20),
	DIRECCION VARCHAR (50),
	AFORO INT);

	CREATE TABLE ENTRADA (
	CODENTRADA VARCHAR(20) PRIMARY KEY,
	NOMEVENTO VARCHAR(20),
	NOMDJ VARCHAR(20) default 'SORPRESA',
	PRECIO INT,
	CATEGORIA VARCHAR(20),
	CANTCONSUMI INT,
	FECHA DATE,
	DIFERENCIAPRECIOMUJER INT,
	CODIGODISC VARCHAR (20),
	FOREIGN KEY (CODIGODISC) REFERENCES DISCOTECA (CODIGODISC) on delete cascade on update cascade
	);

	CREATE TABLE COMPRA (
	DNICLIENTE VARCHAR(9),
	CODENTRADA VARCHAR(20),
	METODOPAGO VARCHAR(20),
	PRECIOTOTAL FLOAT,
	CANTIDADENTRADAS INT, 
	TELEFONO INT, 
	PRIMARY KEY (DNICLIENTE, CODENTRADA),
	FOREIGN KEY (DNICLIENTE) REFERENCES CLIENTE (DNICLIENTE),
	FOREIGN KEY (CODENTRADA) REFERENCES ENTRADA (CODENTRADA));

-- Insertar admin 

	INSERT INTO USUARIO (DNI, NOMBRE, APELLIDO, NOMUSU, FECHANAC, EMAIL, CONTRASEINA)
	VALUES ('20978340V', 'Andoni', 'Ordoñez', 'andronix20', '2005-12-06', 'andoni@gmail.com', 'abcd*1234');

	INSERT INTO ADMINISTRADOR (DNIADMIN, NOMDISCOTECA)
	VALUES ('20978340V', 'Stage');

-- Insertar Discoteca

	INSERT INTO DISCOTECA (CODIGODISC, NOMBRE, DIRECCION, AFORO)
	VALUES ('1111', 'Stage', 'DirecciónDiscoteca', 1000);

-- Crear Funcion

	DELIMITER //

	CREATE FUNCTION AforoDisponibleEnFecha(nombreDiscoteca VARCHAR(20), fecha DATE)
	RETURNS INT
	DETERMINISTIC
	BEGIN
		DECLARE aforoDisco INT;
		DECLARE entradasVendidas INT;

		-- Obtener el aforo de la discoteca
		SELECT AFORO INTO aforoDisco
		FROM DISCOTECA
		WHERE NOMBRE = nombreDiscoteca;

		-- Obtener la cantidad de entradas vendidas en la fecha específica
		SELECT SUM(C.CANTIDADENTRADAS) INTO entradasVendidas
		FROM COMPRA C
		JOIN ENTRADA E ON C.CODENTRADA = E.CODENTRADA
		WHERE E.FECHA = fecha
		AND E.CODIGODISC = (SELECT CODIGODISC FROM DISCOTECA WHERE NOMBRE = nombreDiscoteca);

		-- Calcular el aforo disponible restando las entradas vendidas del aforo total
		RETURN aforoDisco - IFNULL(entradasVendidas, 0);
	END //

	DELIMITER ;



